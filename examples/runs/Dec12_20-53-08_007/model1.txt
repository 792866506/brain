Sequential (
  (fc): Conv2d(22, 30, kernel_size=(3, 1), stride=(1, 1))
  (bn_fc): BatchNorm2d(30, eps=1e-05, momentum=0.1, affine=True)
  (elu_fc): ELU (alpha=1.0, inplace)
  (dimshuffle): Expression(expression=_transpose_time_to_spat)
  (conv_time): Conv2d(1, 25, kernel_size=(11, 1), stride=(1, 1))
  (conv_spat): Conv2d(25, 25, kernel_size=(1, 30), stride=(1, 1), bias=False)
  (bn): BatchNorm2d(25, eps=1e-05, momentum=0.1, affine=True)
  (elu): ELU (alpha=1.0, inplace)
  (pool): MaxPool2d (size=(3, 1), stride=(3, 1), dilation=(1, 1))
  (drop2): Dropout (p = 0.5, inplace)
  (2_DenseLayer): _DenseLayer (
    (conv_1): Conv2d(25, 100, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(100, eps=1e-05, momentum=0.1, affine=True)
    (elu_1): ELU (alpha=1.0, inplace)
    (conv_2): Conv2d(100, 50, kernel_size=(11, 1), stride=(1, 1), padding=(5, 0), bias=False)
    (bn2): BatchNorm2d(50, eps=1e-05, momentum=0.1, affine=True)
    (elu_2): ELU (alpha=1.0, inplace)
  )
  (pool2): MaxPool2d (size=(3, 1), stride=(3, 1), dilation=(1, 1))
  (drop3): Dropout (p = 0.5, inplace)
  (3_DenseLayer): _DenseLayer (
    (conv_1): Conv2d(75, 200, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn1): BatchNorm2d(200, eps=1e-05, momentum=0.1, affine=True)
    (elu_1): ELU (alpha=1.0, inplace)
    (conv_2): Conv2d(200, 100, kernel_size=(11, 1), stride=(1, 1), padding=(5, 0), bias=False)
    (bn2): BatchNorm2d(100, eps=1e-05, momentum=0.1, affine=True)
    (elu_2): ELU (alpha=1.0, inplace)
  )
  (pool3): MaxPool2d (size=(3, 1), stride=(3, 1), dilation=(1, 1))
  (drop4): Dropout (p = 0.5, inplace)
  (4_Transition): _Transition (
    (conv): Conv2d(175, 100, kernel_size=(11, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(100, eps=1e-05, momentum=0.1, affine=True)
    (elu): ELU (alpha=1.0, inplace)
    (pool): MaxPool2d (size=(3, 1), stride=(3, 1), dilation=(1, 1))
  )
  (conv_classifier): Conv2d(100, 4, kernel_size=(10L, 1), stride=(1, 1))
  (softmax): LogSoftmax ()
  (squeeze): Expression(expression=_squeeze_final_output)
)